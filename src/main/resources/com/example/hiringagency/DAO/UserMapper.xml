<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.example.hiringagency.DAO.UserMapper">

    <resultMap id = "UserResult" type = "com.example.hiringagency.domain.entity.Users" >
        <id property = "userId" column = "UserID" />
        <result property="firstName" column="FirstName" />
        <result property="lastName" column="LastName" />
        <result property="username" column="Username" />
        <result property="password" column="Password"/>
        <result property="firstLogin" column="FirstLogin" />
        <result property="postalAddress" column="PostalAddress" />
        <result property="phoneNumber" column="PhoneNumber" />
        <result property="email" column="Email" />
        <result property="type" column="Type" />
        <result property="isBlocked" column="IsBlocked" />
        <result property="isDeleted" column="IsDeleted" />
    </resultMap>

    <!-- log in -->
    <select id = "login" resultType = "com.example.hiringagency.domain.entity.Users">
        select *
        from Users
        where username = #{username} and password = #{password}
    </select>

    <select id="selectIsBlockedByName" resultType="boolean" >
        select isBlocked
        from Users
        where username = #{username}
    </select>

    <select id="selectIsDeletedByName" resultType="boolean" >
        select isDeleted
        from Users
        where username = #{username}
    </select>

    <select id="selectFirstLoginByName" resultType="boolean" >
        select FirstLogin
        from Users
        where username = #{username}
    </select>

    <select id="selectAllQuestions" resultType="com.example.hiringagency.domain.entity.SecurityQuestionBank">
        select *
        from SecurityQuestionBank
    </select>

    <insert id="setQuestions" parameterType="com.example.hiringagency.domain.entity.SecurityQuestions">
        insert into SecurityQuestions(`bankQuestionId`, `answer`, `userId`)
        values (#{bankQuestionId}, #{answer}, #{userId})
    </insert>

    <select id="selectQuestionById" resultType="com.example.hiringagency.domain.model.UserQuestions">
        select *
        from SecurityQuestions sq left join SecurityQuestionBank sqb on sq.bankQuestionId = sqb.bankQuestionId
        where userId = #{userId}
    </select>

    <select id="selectUserInfoByUserName" resultMap="UserResult" >
        select *
        from Users
        where username = #{username}
    </select>

    <update id="changePassword" parameterType="com.example.hiringagency.domain.model.UserPassword">
        update Users
        set password = #{password}
        where username = #{username}
    </update>

    <delete id="deleteSecurityQuestion" parameterType="com.example.hiringagency.domain.entity.SecurityQuestions">
        delete from SecurityQuestions
        where bankQuestionId = #{bankQuestionId} and userId = #{userId}
    </delete>


    <delete id="deleteUser" parameterType="com.example.hiringagency.domain.entity.Users">
        delete from Users
        where username = #{username}
    </delete>

    <update id="activateUser" parameterType="com.example.hiringagency.domain.entity.Users">
        update Users
        set isBlocked = 0
        where username = #{username}
    </update>

    <update id="deactivateUser" parameterType="com.example.hiringagency.domain.entity.Users">
        update Users
        set isBlocked = 1
        where username = #{username}
    </update>

    <select id="selectQuestionIdById" resultType="java.lang.Long">
        select questionId
        from SecurityQuestions
        where userId = #{userId} and bankQuestionId = #{bankQuestionId}
    </select>

    <update id="softDeleteUser" parameterType="com.example.hiringagency.domain.entity.Users">
        update Users
        set isDeleted = 1
        where username = #{username}
    </update>


</mapper>
