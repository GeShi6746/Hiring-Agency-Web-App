<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.example.hiringagency.DAO.StaffMapper">

    <insert id="setAd" parameterType="com.example.hiringagency.domain.entity.JobAdvertisements">
        insert into JobAdvertisements(`serviceType`, `educationRequirement`, `experience`)
        values (#{serviceType}, #{educationRequirement}, #{experience})
    </insert>

    <select id="selectAllAds" resultType="com.example.hiringagency.domain.entity.JobAdvertisements">
        select *
        from JobAdvertisements
    </select>

    <delete id="deleteAd" parameterType="com.example.hiringagency.domain.entity.JobAdvertisements">
        delete from JobAdvertisements
        where jobAdvertisementId = #{jobAdvertisementId}
    </delete>

    <!-- 接下来4个都是为了hire HP-->
    <insert id="addHPAccount" parameterType="com.example.hiringagency.domain.entity.Users">
        insert into Users(`firstName`, `lastName`,`username`, `password`, `firstLogin`, `postalAddress`, `phoneNumber`,`email`,`type`, `isBlocked`)
        values (#{firstName}, #{lastName}, #{username}, #{password}, 0, #{postalAddress}, #{phoneNumber}, #{email}, 3, 0)
    </insert>

    <select id="selectHPInfoById" resultType="com.example.hiringagency.domain.model.Info">
        select firstName, lastName, postalAddress, phoneNumber, email
        from HealthcareJobApplication
        where healthcareJobApplicationId = #{healthcareJobApplicationId}
    </select>

    <select id="selectMaxId" resultType="java.lang.Long">
        select MAX(userId)
        from Users
    </select>

    <update id="updateHPId">
        update HealthcareJobApplication
        set userId = #{userId}
        where healthcareJobApplicationId = #{healthcareJobApplicationId}
    </update>

    <!-- list hired HP -->
    <select id="selectAllHP" resultType="com.example.hiringagency.domain.entity.Users">
        select *
        from Users
        where Type = 3 and isDeleted = 0
    </select>

    <!-- 接下来3个都是为了approve CT-->
    <insert id="addCTAccount" parameterType="com.example.hiringagency.domain.entity.Users">
        insert into Users(`firstName`, `lastName`,`username`, `password`, `firstLogin`, `postalAddress`, `phoneNumber`,`email`,`type`, `isBlocked`)
        values (#{firstName}, #{lastName}, #{username}, #{password}, 0, #{postalAddress}, #{phoneNumber}, #{email}, 2, 0)
    </insert>

    <select id="selectCTInfoById" resultType="com.example.hiringagency.domain.model.Info">
        select firstName, lastName, postalAddress, phoneNumber, email
        from CareTakerRegistration
        where careTakerRegistrationId = #{careTakerRegistrationId}
    </select>

    <update id="updateCTId">
        update CareTakerRegistration
        set userId = #{userId}
        where careTakerRegistrationId = #{careTakerRegistrationId}
    </update>

    <!-- approved CT -->
    <select id="selectAllCT" resultType="com.example.hiringagency.domain.entity.Users">
        select *
        from Users
        where Type = 2 and isDeleted = 0
    </select>

    <select id="selectHPbyRequest">
        select UserID
        from HealthcareJobApplication hja left join CareRequests cb on cb.GenderSpecific = hja.Gender and cb.ServiceType = hja.ServiceType
        where hja.active = 0 and cb.careRequestID = #{careRequestId}
    </select>

    <insert id="addService" parameterType="com.example.hiringagency.domain.entity.CareService">
        insert into Service(`serviceId`, `requestId`, `hpid`, `careTakerId`, `status`)
        values (#{serviceId}, #{requestId}, #{hpid}, #{careTakerId}, 0)
    </insert>

    <update id="terminateService">
        update Service
        set status = 1
        where serviceId = #{serviceId}
    </update>

    <update id="reAssignHP">
        update Service
        set hpid = #{hpid}
        where serviceId = #{serviceId}
    </update>

    <insert id="addBilling" parameterType="com.example.hiringagency.domain.entity.Billing">
        insert into Billing(`careTakerId`, `careRequestId`, `hourlyRate`, `paidAmount`, `amountYetToPay`, `serviceId`)
        values (#{careTakerId}, #{careRequestId}, #{hourlyRate}, #{paidAmount}, #{amountYetToPay}, #{serviceId})
    </insert>

    <select id="selectRequests" resultType="com.example.hiringagency.domain.entity.CareRequests">
        select *
        from CareRequests
    </select>

    <select id="selectPendingService" resultType="com.example.hiringagency.domain.entity.CareService">
        select *
        from Service
        where status = 0
    </select>

    <select id="selectPendingServiceById" resultType="java.lang.Long">
        select status
        from Service
        where status = 0 and careTakerId = #{careTakerId}
    </select>

    <update id="softDeleteCT" parameterType="com.example.hiringagency.domain.entity.Users">
        update Users
        set isDeleted = 1
        where userId = #{careTakerId}
    </update>

    <select id="selectTerminateService" parameterType="com.example.hiringagency.domain.entity.CareService">
        select *
        from Service
        where status = 1
    </select>

    <select id="selectBilling" parameterType="com.example.hiringagency.domain.entity.Billing">
        select *
        from Billing
    </select>
</mapper>
